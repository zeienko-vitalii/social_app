# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
# include: package:flutter_lints/flutter.yaml
include: package:very_good_analysis/analysis_options.yaml

analyzer:
  plugins:
    - dart_code_metrics
  errors:
    invalid_annotation_target: ignore

  exclude:
    - "**/*.g.dart"
    - "**/*.gr.dart"
    - "**/*.freezed.dart"
    - "bin/cache/**"
    # the following two are relative to the stocks example and the flutter package respectively
    # see https://github.com/dart-lang/sdk/issues/28463
    - "lib/i18n/stock_messages_*.dart"
    - "lib/src/http/**"
    - lib/generated_plugin_registrant.dart

dart_code_metrics:
  anti-patterns:
    - long-method
    - long-parameter-list
  metrics:
    cyclomatic-complexity: 20
    lines-of-executable-code: 50
    number-of-parameters: 8
    maximum-nesting-level: 5
  metrics-exclude:
    - test/**
    - "**/*_module.dart"
  rules:
    # - newline-before-return
    - no-boolean-literal-compare
    # - no-empty-block
    - prefer-trailing-comma
    # - prefer-conditional-expressions
    - no-equal-then-else
    - avoid-unused-parameters
    - binary-expression-operand-order
    # - no-magic-number

linter:
  rules:
    avoid_multiple_declarations_per_line: true
    public_member_api_docs: false
    flutter_style_todos: false
    lines_longer_than_80_chars: false
    one_member_abstracts: false
    sort_pub_dependencies: false # allow grouping dependencies
